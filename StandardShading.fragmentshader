#version 330 core

#define VERSION_SHADER
#define LIGHTING

#ifdef VERSION_SHADER // == 3){
// Interpolated values from the vertex shaders
in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
//}else{
#else
varying vec2 UV;
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace;
//}
#endif

#ifdef VERSION_SHADER
out vec3 color;
#endif

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
/*uniform*/ vec3 LightPosition_worldspace = vec3(0, 10, 800);

const float amount = 1.0; 
const vec4 redfilter   = vec4(1.0, 0.0, 0.0, 0.0); 
const vec4 bluegreenfilter  = vec4(0.0, 1.0, 0.7, 0.0);

void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 100000.0;
	
	// Material properties
	vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	// Normal of the computed fragment, in camera space
	vec3 n = normalize( Normal_cameraspace );
	// Direction of the light (from the fragment to the light)
	vec3 l = normalize( LightDirection_cameraspace );
	// Cosine of the angle between the normal and the light direction, 
	// clamped above 0
	//  - light is at the vertical of the triangle -> 1
	//  - light is perpendicular to the triangle -> 0
	//  - light is behind the triangle -> 0
	float cosTheta = clamp( dot( n,l ), 0,1 );
	
	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);
	// Direction in which the triangle reflects the light
	vec3 R = reflect(-l,n);
	// Cosine of the angle between the Eye vector and the Reflect vector,
	// clamped to 0
	//  - Looking into the reflection -> 1
	//  - Looking elsewhere -> < 1
	float cosAlpha = clamp( dot( E,R ), 0,1 );
	
		vec4 input0 = texture2D(myTextureSampler, UV); 

        vec4 redrecord = input0 * redfilter; 
        vec4 bluegreenrecord = input0 * bluegreenfilter; 
                            
        vec4 rednegative = vec4(redrecord.r); 
        vec4 bluegreennegative = vec4((bluegreenrecord.g + bluegreenrecord.b)/2.0); 

        vec4 redoutput = rednegative * redfilter; 
        vec4 bluegreenoutput = bluegreennegative * bluegreenfilter; 

        // additive 'projection" 
        vec4 result = redoutput + bluegreenoutput; 

        //gl_FragColor = vec4(vec3(mix(input0, result, amount).rgb), 1.0); 
	
	#ifdef VERSION_SHADER
		#ifdef LIGHTING
	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
	
		//color += vec4(vec3(mix(input0, result, amount).rgb), 1.0).rgb;
		#else	
		color = texture2D(myTextureSampler, UV).rgb;
		#endif

	#else
		#ifdef LIGHTING
	gl_FragColor.rgb = 
		MaterialAmbientColor +
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);
		}
		#else
		gl_FragColor.rgb = texture2D(myTextureSampler, UV).rgb;
		#endif
		
	#endif
		
}
